{"version":3,"sources":["components/About.js","veer_logo.png","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","id","className","darkModeBtn","props","btn_color_changer","document","getElementsByClassName","navLinks","drak_light_switch","getElementById","searchBtn","html","getElementsByTagName","search_inp","navbar","style","background","color","innerText","Navbar","to","src","veer_logo","alt","title","type","onClick","Textform","useState","text","setText","totalWordsCounter","number_of_words_whiteSpace","split","number_of_words_newline","totalWords","length","forEach","element","elem","action","heading","htmlFor","name","onChange","eventobj","target","value","cols","rows","showAlert","newtext","toUpperCase","toLowerCase","arr","join","textarea_value","navigator","clipboard","writeText","show_alert_func","display","defaultProps","about_link","Alert","alert","alert_type","msg","App","DarkModeState","setAlert","exact","path","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.321eb0f6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// CODE WITH HARRY LOGIC\r\n/*\r\nConst[mystyle, setMystyle] = useState({\r\nColor: 'black'\r\nBackgroundColor: 'white'})\r\nConst[btnText, SetBtnText] = useState(\"Enable Dark mode\")\r\nConst toogleStyle = {}=>{\r\n    if(myStyle.color === 'black'){\r\n        setMyStyle({\r\n        Color: 'white',\r\n        backgroundColor: 'black',\r\n        Border; '1px solid white'\r\n    })\r\n    setBtnText(\"Enable Light Mode\")} \r\n    else{SetMyStyle({\r\n        Color: 'back',\r\n        backgroundColor: 'white'})\r\n    })\r\n    Set BtnText(\"Enable Dark Mode\")}\r\n\r\n    */\r\n\r\nexport default function About() {\r\n    return (\r\n        <>  <div id=\"about\" className=\"aboutDiv\">\r\n                <h1>About Us</h1>\r\n                <p id='creator_name_para'>Website creator is Veer Khatri </p>\r\n                <p className=\"about_para\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt non, numquam quam, impedit eaque totam odio aliquam illum voluptas cumque doloribus officia ab temporibus qui! Lorem ipsum dolor sit amet consectetur adipisicing elit. Asperiores quia voluptate incidunt alias vero assumenda doloribus dolore provident beatae, magni nesciunt molestiae nisi vitae possimus, pariatur sed, praesentium accusamus? Debitis in tenetur, quos autem perferendis error sapiente eius nulla obcaecati modi dolores animi, ut suscipit eveniet ab repellendus porro? Blanditiis reiciendis animi pariatur id non veniam consequuntur quam molestias suscipit expedita accusamus iste, quo ab laboriosam.</p>\r\n                {/* <input type=\"checkbox\" name=\"checkbox\" id=\"dark_light_checkbox\" /> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/veer_logo.ffcd223e.png\";","import veer_logo from '../veer_logo.png';\r\nimport PropTypes from 'prop-types'\r\nimport'./Navbar_css.css'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n// rfc emmet \r\nfunction darkModeBtn(props) {\r\n    let btn_color_changer = document.getElementsByClassName(\"btn\")\r\n    let navLinks = document.getElementsByClassName(\"navlinks\");\r\n    let drak_light_switch = document.getElementById(\"drak_light_switch\");\r\n    let searchBtn = document.getElementById(\"search_btn\");\r\n    let html = document.getElementsByTagName('html')[0]\r\n    let search_inp = document.getElementById(\"search_input\")\r\n    let navbar = document.getElementsByClassName(\"navbar\")[0];\r\n\r\n    if (html.style.background === \"white\") {\r\n        // props.showAlert(\"Light mode enabled\", \"Success\") not working\r\n        for (const element of navLinks) {\r\n            element.style.color = 'white'\r\n\r\n        }\r\n        for (const iterator of btn_color_changer) {\r\n            iterator.style.background = 'none'\r\n        }\r\n        searchBtn.style.color = 'white'\r\n        search_inp.style.color = 'white'\r\n        html.style.background = \"black\"\r\n        navbar.style.background = \"#000054\"\r\n        html.style.color = 'white'\r\n        drak_light_switch.innerText = \"Light Mode\"\r\n    }\r\n    else {\r\n        // props.showAlert(\"Dark mode enabled\", \"Success\") not working\r\n        for (const element of navLinks) {\r\n            element.style.color = 'black'\r\n\r\n        }\r\n        for (const iterator of btn_color_changer) {\r\n            iterator.style.background = '#FF5200'\r\n        }\r\n        search_inp.style.color = 'black'\r\n        searchBtn.style.color = 'black'\r\n        navbar.style.background = \"#fff\"\r\n        html.style.background = \"white\"\r\n        html.style.color = 'black'\r\n        drak_light_switch.innerText = \"Dark Mode\";\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className=\"navbar\">\r\n            <div className=\"logo_img_div\">\r\n                <Link to=\"/\" id=\"logo_anchor_tag\"><img src={veer_logo} alt=\"logo\" id='logo_img' /></Link>\r\n                <p>{props.title}</p>\r\n            </div>\r\n            <div className=\"links\">\r\n                <li><Link to=\"/\" className=\"navlinks\">Home</Link></li> \r\n                <li><Link to=\"/about\" className=\"navlinks\">About Us</Link></li>\r\n                <li><Link to=\"/contact\" className=\"navlinks\">Contact Us</Link></li>\r\n                <li><Link to=\"/seller\" className=\"navlinks\">Become a Seller</Link></li>\r\n            </div>\r\n            <div className=\"searchBox\">\r\n                <input type=\"text\" id=\"search_input\" />\r\n                <button id=\"search_btn\">Search</button>\r\n            </div>\r\n        <button id='drak_light_switch' className=\" darkLightBTN\" onClick={darkModeBtn}>Dark Mode</button>\r\n        </nav>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    // this is like a checker so we mistakenly not send wrong datatype in props(properties) \r\n    title: PropTypes.string,\r\n    about_link: PropTypes.string.isRequired\r\n    // isRequired means about_link is required if about_link is not given and not any default value of about_link is given then give error\r\n}\r\nNavbar.defaultProps = {\r\n    // these values are not shown if title and about_link are given, they are only shown when props are not values are not initialized to the props\r\n    title : \"hello title\",\r\n    about_link: \"i am default\" \r\n}","// hooks are used to use function of classes without making classes\r\nimport React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    function uppercaseFunc() {\r\n        if (text !== \"\") {\r\n            props.showAlert(\"Uppercased the text\", \"Success\")\r\n        }\r\n        else {\r\n            props.showAlert(\"textarea is empty\", \"Warning\")     \r\n        }\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext)\r\n    }\r\n    function copyText() {\r\n        if (text !== \"\") {\r\n            props.showAlert(\"copied the text\", \"Success\")\r\n        }\r\n        else {\r\n            props.showAlert(\"textarea is empty\", \"Warning\")     \r\n        }\r\n        let textarea_value = document.getElementById(\"textarea\").value\r\n        navigator.clipboard.writeText(textarea_value)\r\n\r\n    }\r\n    function lowercaseFunc() {\r\n        if (text !== \"\") {\r\n            props.showAlert(\"lowercased the text\", \"Success\")\r\n        }\r\n        else {\r\n            props.showAlert(\"textarea is empty\", \"Warning\")\r\n        }\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext)\r\n    }\r\n    function clearText() {\r\n        if (text !== \"\") {\r\n            props.showAlert(\"cleared the text\", \"Success\")\r\n        }\r\n        else {\r\n            props.showAlert(\"textarea is empty\", \"Warning\")\r\n        }\r\n        setText(\"\")\r\n    }\r\n    function handleOnChange(eventobj) {\r\n        setText(eventobj.target.value)\r\n    }\r\n    function RemoveExrtaSpaces(eventobj) {\r\n        if (text !== \"\") {\r\n            props.showAlert(\"removed the text\", \"Success\")\r\n        }\r\n        else {\r\n            props.showAlert(\"textarea is empty\", \"Warning\")\r\n        }\r\n        let arr = text.split(/[ ]+/);\r\n        setText(arr.join(\" \"));\r\n\r\n    }\r\n    const [text, setText] = useState(\"\");// here we are saying that we set a state variable named text and its default value is (enter text here)\r\n    // text = \"abcd\" // we cant change the value of text like this we have to use setText function for changing value or assigning new values of text\r\n    // setText(\"this is how to change text\");\r\n\r\n    function totalWordsCounter() {\r\n        let number_of_words_whiteSpace = text.split(\" \");\r\n        let number_of_words_newline = text.split('\\n');\r\n        let totalWords = number_of_words_newline.length + number_of_words_whiteSpace.length;\r\n\r\n        if (text === \"\") {\r\n            totalWords = 0;\r\n        }\r\n        else {\r\n            number_of_words_whiteSpace.forEach(element => {\r\n                if (element === ``) {\r\n                    totalWords--;\r\n\r\n                }\r\n\r\n            });\r\n            number_of_words_newline.forEach(elem => {\r\n                if (elem === \"\\n\") {\r\n                    totalWords--;\r\n                }\r\n                if (elem === \"\") {\r\n                    totalWords--;\r\n\r\n                }\r\n            })\r\n            totalWords--;\r\n        }\r\n        return totalWords;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div action=\"\" className=\"form\">\r\n                <h1>{props.heading}</h1>\r\n                <label htmlFor=\"textarea\"></label>\r\n                <textarea name=\"textarea\" id=\"textarea\" onChange={handleOnChange} value={text} cols=\"25\" rows=\"10\"></textarea>\r\n                <div className=\"btn_container\">\r\n                    <button id='uppercase' onClick={uppercaseFunc} className=\"btn\">Convert to Uppercase</button>\r\n                    <button id='lowercase' onClick={lowercaseFunc} className=\"btn\">Convert to lowercase</button>\r\n                    <button id='lowercase' onClick={RemoveExrtaSpaces} className=\"btn\">Remove-extra-spaces</button>\r\n                    <button id='copy' onClick={copyText} className=\"btn\">Copy Text</button>\r\n                    <button id='clear' onClick={clearText} className=\"btn\">Clear Text</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"form\">\r\n                <h1>Your text summary</h1>\r\n                <p className=\"summaryPara\">{totalWordsCounter()} words and {text.length} characters</p>\r\n                <p className=\"summaryPara\">{0.005 * totalWordsCounter()} minutes to read this</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        //props.alert && means if props.alert is false then code after it will not evalute \r\n        <>\r\n\r\n            <div id=\"alert_parent\">\r\n                {props.alert && <div id='alert' >\r\n                    {show_alert_func}\r\n                    <p ><strong>{props.alert.alert_type}</strong>:{props.alert.msg} </p>\r\n                    </div>}\r\n                    {}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nfunction show_alert_func() {\r\n    document.getElementById(\"alert\").style.display = \"block\"\r\n\r\n}\r\n\r\n\r\nexport default Alert;","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [DarkModeState, setDarkModeState] = useState(false)// NEVER USED tells wherther the dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      alert_type: type,\n\n    })\n    \n    \n    setTimeout(() => {\n      setAlert(false)\n    }, 2500);\n  }\n  return (\n    // the below code is JSX which is a combination of js and html\n    // we only have to return one tag and if we want to return more than one tag we use JSX fragment which are these --> <> </>\n    <>\n      <Router>\n        <Navbar title='Company name' about_link=\"About Us\" DarkModeState={DarkModeState} />{/*title and about_link are both props */}\n        <Alert alert={alert} />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <Textform showAlert={showAlert} heading='Enter the text to analyze' />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}